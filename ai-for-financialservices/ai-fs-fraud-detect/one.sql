SELECT t.id, t.inv_no as Invoice, '$ '||t.total_pay as Amount, 
trans_status, comments, 
transaction_status as Status,
category,time_difference_number,merchant_state, merchant_place,
CREDIT_CARD_NO as Card, 
LAG(CREDIT_CARD_NO) OVER (ORDER BY id) AS Prev_card, 
MALL Place, 
LAG(MALL) OVER (ORDER BY id) AS Prev_mall,  
to_char(TX_TIMESTAMP,'dd/mm/yyyy hh24:mi:ss') Curr_Timestamp,   
LAG(to_char(TX_TIMESTAMP,'dd/mm/yyyy hh24:mi:ss')) OVER (ORDER BY id)  Prev_Timestamp, 
t.TX_TIMESTAMP - LAG(t.TX_TIMESTAMP) OVER (ORDER BY t.TX_TIMESTAMP) AS time_difference, 
abs(LAG(to_char(TX_TIMESTAMP,'yyyymmddHH24MISS')) OVER (ORDER BY id)  - to_char(TX_TIMESTAMP,'yyyymmddHH24MISS') ) AS  time_diff_number  
FROM RETAIL_SHOPPING_FD t 
WHERE TX_TYPE = 'FDTX'  
order by id desc

--------- Start Tx ------
declare

v2_MERCHANT_REGION   RETAIL_SHOPPING_FD.MERCHANT_REGION%TYPE;
v2_MERCHANT_STATE   RETAIL_SHOPPING_FD.MERCHANT_STATE%TYPE;  

begin 
 DBMS_SCHEDULER.ENABLE( 'RealTime_TX_Job');
 DBMS_SCHEDULER.ENABLE( 'MY_TX_JOB');
end;

------- Stop Tx --------------

begin
 DBMS_SCHEDULER.DISABLE( 'RealTime_TX_Job',TRUE );
 DBMS_SCHEDULER.DISABLE( 'MY_TX_JOB',TRUE ); 
end;

--- Clear Tx -------------

begin 
        delete from RETAIL_SHOPPING_FD where TX_TYPE = 'FDTX' ;
        delete from BANK_TRANSFERS; 
        UPDATE CC_FD SET STATUS = 'Active';
end;

------------------------- BANK_TRANSFERS DDL --------------

  CREATE TABLE "BANK_TRANSFERS" 
   (	"TXN_ID" NUMBER, 
	"SRC_ACCT_ID" NUMBER, 
	"DST_ACCT_ID" NUMBER, 
	"DESCRIPTION" VARCHAR2(400), 
	"AMOUNT" NUMBER, 
	"PROFILE" VARCHAR2(20), 
	"INV_NO" VARCHAR2(50), 
	"MERCHANT_REGION" VARCHAR2(100), 
	"MERCHANT_STATE" VARCHAR2(100), 
	"MERCHANT_PLACE" VARCHAR2(100), 
	 PRIMARY KEY ("TXN_ID")
  USING INDEX  ENABLE
   ) ;

  ALTER TABLE "BANK_TRANSFERS" ADD FOREIGN KEY ("SRC_ACCT_ID")
	  REFERENCES "BANK_ACCOUNTS" ("ID") ENABLE;
  ALTER TABLE "BANK_TRANSFERS" ADD FOREIGN KEY ("DST_ACCT_ID")
	  REFERENCES "BANK_ACCOUNTS" ("ID") ENABLE;

------------------------- RETAIL_SHOPPING_FD DDL --------------

  CREATE TABLE "RETAIL_SHOPPING_FD" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"INV_NO" VARCHAR2(50), 
	"GENDER" VARCHAR2(50), 
	"AGE" NUMBER, 
	"CATEGORY" VARCHAR2(50), 
	"QTY" NUMBER, 
	"PRICE" NUMBER, 
	"TOTAL_PAY" NUMBER, 
	"METHOD" VARCHAR2(50), 
	"INV_DATE" TIMESTAMP (6), 
	"MALL" VARCHAR2(50), 
	"CUST_ID" NUMBER, 
	"CUST_FIRST_NAME" VARCHAR2(100), 
	"CUST_LAST_NAME" VARCHAR2(100), 
	"CREDIT_CARD_NO" NUMBER, 
	"TRANS_STATUS" VARCHAR2(20), 
	"CUST_CITY" VARCHAR2(100), 
	"CUST_STATE_PROVINCE" VARCHAR2(100), 
	"TRANSACTION_STATUS" VARCHAR2(50), 
	"COMMENTS" VARCHAR2(500), 
	"COUNTRY_ID" VARCHAR2(50), 
	"TX_TIMESTAMP" TIMESTAMP (6), 
	"MERCHANT_ID" NUMBER, 
	"MERCHANT_CITY" VARCHAR2(50), 
	"MERCHANT_REGION" VARCHAR2(255), 
	"MERCHANT_STATE" VARCHAR2(100), 
	"MERCHANT_PLACE" VARCHAR2(100), 
	"LONGITUDE" NUMBER, 
	"LATITUDE" NUMBER, 
	"MERCHANT_PLACE_ID" NUMBER, 
	"CUSTOMER_FULLNAME" VARCHAR2(50), 
	"MERCHANT_FULLNAME" VARCHAR2(50), 
	"INV_TIMESTAMP" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"CC_ID" NUMBER, 
	"TIME_DIFFERENCE_NUMBER" NUMBER, 
	"TX_TYPE" VARCHAR2(20), 
	"WORKFLOW_STATUS" VARCHAR2(100), 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "RETAIL_SHOPPING_FD_TRG" 
before 
insert on "RETAIL_SHOPPING_FD"  
for each row 
declare 
        v_ccid number; 
        v_n number := 0; 
        v_min_time_diff_number number; 
        v_min_tx_value number; 
        v_max_tx_value number; 
begin 
 
    SELECT unit_value into v_min_time_diff_number from FD_BUSINESS_RULES where unit = 'Minimum Time Frequency'; 
    SELECT unit_value into v_min_tx_value from FD_BUSINESS_RULES where unit = 'Approved Purchase'; 
    SELECT unit_value into v_max_tx_value from FD_BUSINESS_RULES where unit = 'Rejected Purchase'; 
 
    SELECT id 
      INTO v_ccid  
      FROM cc_fd 
     WHERE cc_no = :new.credit_card_no;    
    if inserting then 
        if :new.total_pay < v_min_tx_value then 
                :new.transaction_status := 'APPROVE'; 
                :new.comments := 'Lower than minimum amount of $ '||v_min_tx_value||''; 
        elsif :new.total_pay >= v_min_tx_value AND :new.total_pay < v_max_tx_value then 
                :new.transaction_status := 'OnHold'; 
                :new.trans_status := 'UNREAD'; 
        else  
                :new.transaction_status := 'REJECT'; 
                :new.comments := 'Higher than allowed amount of $ '||v_max_tx_value||''; 
        end if;  
        :new.cc_id := v_ccid;     
   end if;      
    
end;
/
ALTER TRIGGER "RETAIL_SHOPPING_FD_TRG" ENABLE;

--------  CC_FD DDL ---------------- 

  CREATE TABLE "CC_FD" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CUST_ID" NUMBER, 
	"CC_NO" NUMBER, 
	"STATUS" VARCHAR2(50), 
	"VALIDITY" DATE, 
	"FIRST_NAME" VARCHAR2(50), 
	"LAST_NAME" VARCHAR2(50), 
	"BANK_NAME" VARCHAR2(50), 
	"COMMENTS" VARCHAR2(100), 
	"CARD_TYPE" VARCHAR2(10), 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

--------------- JOBS ------------------
 
begin
 DBMS_SCHEDULER.DISABLE( 'RealTime_TX_Job',TRUE );
 DBMS_SCHEDULER.DISABLE( 'MY_TX_JOB',TRUE ); 
end;


begin
  dbms_scheduler.create_job (
     job_name           =>  'RealTime_TX_Job',
     job_type           =>  'STORED_PROCEDURE',
     job_action         =>  'FD_TX_INSERTS',
     start_date         =>  systimestamp, 
     repeat_interval    =>  'freq=SECONDLY; interval = 20;',
     enabled            =>  true,
     comments           => 'Realtime Txn Job'
  );
end; 

begin
  dbms_scheduler.create_job (
     job_name           =>  'My_Tx_Job',
     job_type           =>  'STORED_PROCEDURE',
     job_action         =>  'FD_TX_PROC',
     start_date         =>  systimestamp, 
     repeat_interval    =>  'freq=minutely; interval = 1;',
     enabled            =>  true,
     comments           => 'My tx job'
  );
end;

---------
Begin 
dbms_scheduler.disable('RealTime_TX_Job',TRUE );
DBMS_SCHEDULER.SET_ATTRIBUTE ( name => 'RealTime_TX_Job', 
                            attribute => 'repeat_interval', 
                            value => 'freq=SECONDLY; interval = 5;'); 
dbms_scheduler.enable('RealTime_TX_Job');
End;
---------
Begin 
dbms_scheduler.disable('MY_TX_JOB',TRUE );
DBMS_SCHEDULER.SET_ATTRIBUTE ( name => 'MY_TX_JOB', 
                            attribute => 'repeat_interval', 
                            value => 'freq=SECONDLY; interval = 10;'); 
dbms_scheduler.enable('MY_TX_JOB');
End;



begin
 DBMS_SCHEDULER.STOP_JOB( 'RealTime_TX_Job',TRUE );
end;

begin
 DBMS_SCHEDULER.DISABLE( 'RealTime_TX_Job',TRUE );
end;

begin
 DBMS_SCHEDULER.DISABLE( 'MY_TX_JOB',TRUE );
end;

begin
 DBMS_SCHEDULER.DISABLE( 'RealTime_TX_Job',TRUE );
end;
